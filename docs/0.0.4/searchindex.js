Search.setIndex({"alltitles": {"API Reference": [[0, null]], "NerfBaselines Documentation": [[12, null]], "Reference": [[12, null]], "download-dataset": [[11, "nerfbaselines-download-dataset"]], "nerfbaselines": [[1, null], [11, null]], "nerfbaselines.backends": [[2, null]], "nerfbaselines.backends.apptainer": [[2, "module-nerfbaselines.backends.apptainer"]], "nerfbaselines.backends.conda": [[2, "module-nerfbaselines.backends.conda"]], "nerfbaselines.backends.docker": [[2, "module-nerfbaselines.backends.docker"]], "nerfbaselines.cameras": [[3, null]], "nerfbaselines.communication": [[4, null]], "nerfbaselines.datasets": [[5, null]], "nerfbaselines.datasets.blender": [[5, "module-nerfbaselines.datasets.blender"]], "nerfbaselines.datasets.colmap": [[5, "module-nerfbaselines.datasets.colmap"]], "nerfbaselines.datasets.mipnerf360": [[5, "module-nerfbaselines.datasets.mipnerf360"]], "nerfbaselines.datasets.nerfstudio": [[5, "module-nerfbaselines.datasets.nerfstudio"]], "nerfbaselines.registry": [[6, null]], "nerfbaselines.render": [[7, null]], "nerfbaselines.train": [[8, null]], "nerfbaselines.types": [[9, null]], "nerfbaselines.utils": [[10, null]], "render": [[11, "nerfbaselines-render"]], "shell": [[11, "nerfbaselines-shell"]], "train": [[11, "nerfbaselines-train"]]}, "docnames": ["api/modules", "api/nerfbaselines", "api/nerfbaselines.backends", "api/nerfbaselines.cameras", "api/nerfbaselines.communication", "api/nerfbaselines.datasets", "api/nerfbaselines.registry", "api/nerfbaselines.render", "api/nerfbaselines.train", "api/nerfbaselines.types", "api/nerfbaselines.utils", "cli", "index"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["api/modules.rst", "api/nerfbaselines.rst", "api/nerfbaselines.backends.rst", "api/nerfbaselines.cameras.rst", "api/nerfbaselines.communication.rst", "api/nerfbaselines.datasets.rst", "api/nerfbaselines.registry.rst", "api/nerfbaselines.render.rst", "api/nerfbaselines.train.rst", "api/nerfbaselines.types.rst", "api/nerfbaselines.utils.rst", "cli.rst", "index.md"], "indexentries": {"--backend": [[11, "cmdoption-nerfbaselines-render-backend", false], [11, "cmdoption-nerfbaselines-shell-backend", false], [11, "cmdoption-nerfbaselines-train-backend", false]], "--checkpoint": [[11, "cmdoption-nerfbaselines-render-checkpoint", false], [11, "cmdoption-nerfbaselines-train-checkpoint", false]], "--data": [[11, "cmdoption-nerfbaselines-render-data", false], [11, "cmdoption-nerfbaselines-train-data", false]], "--eval-all-iters": [[11, "cmdoption-nerfbaselines-train-eval-all-iters", false]], "--eval-single-iters": [[11, "cmdoption-nerfbaselines-train-eval-single-iters", false]], "--method": [[11, "cmdoption-nerfbaselines-shell-method", false], [11, "cmdoption-nerfbaselines-train-method", false]], "--no-wandb": [[11, "cmdoption-nerfbaselines-train-no-wandb", false]], "--output": [[11, "cmdoption-nerfbaselines-download-dataset-o", false], [11, "cmdoption-nerfbaselines-render-output", false], [11, "cmdoption-nerfbaselines-train-output", false]], "--split": [[11, "cmdoption-nerfbaselines-render-split", false]], "--verbose": [[11, "cmdoption-nerfbaselines-download-dataset-v", false], [11, "cmdoption-nerfbaselines-render-v", false], [11, "cmdoption-nerfbaselines-shell-v", false], [11, "cmdoption-nerfbaselines-train-v", false]], "-o": [[11, "cmdoption-nerfbaselines-download-dataset-o", false]], "-v": [[11, "cmdoption-nerfbaselines-download-dataset-v", false], [11, "cmdoption-nerfbaselines-render-v", false], [11, "cmdoption-nerfbaselines-shell-v", false], [11, "cmdoption-nerfbaselines-train-v", false]], "apptainer (nerfbaselines.registry.methodspec attribute)": [[6, "nerfbaselines.registry.MethodSpec.apptainer", false]], "apptainermethod (class in nerfbaselines.backends)": [[2, "nerfbaselines.backends.ApptainerMethod", false]], "args (nerfbaselines.registry.methodspec attribute)": [[6, "nerfbaselines.registry.MethodSpec.args", false]], "authkey (nerfbaselines.communication.connectionparams attribute)": [[4, "nerfbaselines.communication.ConnectionParams.authkey", false]], "auto_register() (in module nerfbaselines.registry)": [[6, "nerfbaselines.registry.auto_register", false]], "batch_size (nerfbaselines.methodinfo attribute)": [[1, "nerfbaselines.MethodInfo.batch_size", false]], "batched() (in module nerfbaselines.types)": [[9, "nerfbaselines.types.batched", false]], "batched() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.batched", false]], "build() (nerfbaselines.registry.methodspec method)": [[6, "nerfbaselines.registry.MethodSpec.build", false]], "build_code (nerfbaselines.backends.apptainer.remoteprocessmethod attribute)": [[2, "nerfbaselines.backends.apptainer.RemoteProcessMethod.build_code", false]], "build_code (nerfbaselines.backends.conda.remoteprocessmethod attribute)": [[2, "nerfbaselines.backends.conda.RemoteProcessMethod.build_code", false]], "build_code (nerfbaselines.backends.docker.remoteprocessmethod attribute)": [[2, "nerfbaselines.backends.docker.RemoteProcessMethod.build_code", false]], "build_code (nerfbaselines.communication.remoteprocessmethod attribute)": [[4, "nerfbaselines.communication.RemoteProcessMethod.build_code", false]], "camera (class in nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.Camera", false]], "camera_types (nerfbaselines.cameras attribute)": [[1, "nerfbaselines.Cameras.camera_types", false]], "cameramodel (class in nerfbaselines)": [[1, "nerfbaselines.CameraModel", false]], "cameras (class in nerfbaselines)": [[1, "nerfbaselines.Cameras", false]], "cameras (nerfbaselines.datasets.dataset attribute)": [[5, "nerfbaselines.datasets.Dataset.cameras", false]], "cameras (nerfbaselines.types.dataset attribute)": [[9, "nerfbaselines.types.Dataset.cameras", false]], "cat() (nerfbaselines.cameras class method)": [[1, "nerfbaselines.Cameras.cat", false]], "close() (nerfbaselines.backends.apptainer.remoteprocessmethod method)": [[2, "nerfbaselines.backends.apptainer.RemoteProcessMethod.close", false]], "close() (nerfbaselines.backends.conda.remoteprocessmethod method)": [[2, "nerfbaselines.backends.conda.RemoteProcessMethod.close", false]], "close() (nerfbaselines.backends.docker.remoteprocessmethod method)": [[2, "nerfbaselines.backends.docker.RemoteProcessMethod.close", false]], "close() (nerfbaselines.communication.remotemethod method)": [[4, "nerfbaselines.communication.RemoteMethod.close", false]], "close() (nerfbaselines.communication.remoteprocessmethod method)": [[4, "nerfbaselines.communication.RemoteProcessMethod.close", false]], "close() (nerfbaselines.train.trainer method)": [[8, "nerfbaselines.train.Trainer.close", false]], "color_space (nerfbaselines.datasets.dataset attribute)": [[5, "nerfbaselines.datasets.Dataset.color_space", false]], "color_space (nerfbaselines.types.dataset attribute)": [[9, "nerfbaselines.types.Dataset.color_space", false]], "compute_exponential_gamma() (in module nerfbaselines.train)": [[8, "nerfbaselines.train.compute_exponential_gamma", false]], "compute_image_metrics() (in module nerfbaselines.train)": [[8, "nerfbaselines.train.compute_image_metrics", false]], "conda (nerfbaselines.registry.methodspec attribute)": [[6, "nerfbaselines.registry.MethodSpec.conda", false]], "conda_name (nerfbaselines.backends.condamethod attribute)": [[2, "nerfbaselines.backends.CondaMethod.conda_name", false]], "condamethod (class in nerfbaselines.backends)": [[2, "nerfbaselines.backends.CondaMethod", false]], "connectionparams (class in nerfbaselines.communication)": [[4, "nerfbaselines.communication.ConnectionParams", false]], "convert() (nerfbaselines.train.indicesclicktype method)": [[8, "nerfbaselines.train.IndicesClickType.convert", false]], "convert_image_dtype() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.convert_image_dtype", false]], "currentprogress (class in nerfbaselines)": [[1, "nerfbaselines.CurrentProgress", false]], "dataset": [[11, "cmdoption-nerfbaselines-download-dataset-arg-DATASET", false]], "dataset (class in nerfbaselines.datasets)": [[5, "nerfbaselines.datasets.Dataset", false]], "dataset (class in nerfbaselines.types)": [[9, "nerfbaselines.types.Dataset", false]], "datasetnotfounderror": [[5, "nerfbaselines.datasets.DatasetNotFoundError", false]], "decode_args() (nerfbaselines.communication.remotemethod static method)": [[4, "nerfbaselines.communication.RemoteMethod.decode_args", false]], "distortion_parameters (nerfbaselines.cameras attribute)": [[1, "nerfbaselines.Cameras.distortion_parameters", false]], "docker (nerfbaselines.registry.methodspec attribute)": [[6, "nerfbaselines.registry.MethodSpec.docker", false]], "dockermethod (class in nerfbaselines.backends)": [[2, "nerfbaselines.backends.DockerMethod", false]], "download_blender_dataset() (in module nerfbaselines.datasets.blender)": [[5, "nerfbaselines.datasets.blender.download_blender_dataset", false]], "download_capture_name() (in module nerfbaselines.datasets.nerfstudio)": [[5, "nerfbaselines.datasets.nerfstudio.download_capture_name", false]], "download_dataset() (in module nerfbaselines.datasets)": [[5, "nerfbaselines.datasets.download_dataset", false]], "download_mipnerf360_dataset() (in module nerfbaselines.datasets.mipnerf360)": [[5, "nerfbaselines.datasets.mipnerf360.download_mipnerf360_dataset", false]], "download_nerfstudio_dataset() (in module nerfbaselines.datasets.nerfstudio)": [[5, "nerfbaselines.datasets.nerfstudio.download_nerfstudio_dataset", false]], "encoded_args (nerfbaselines.communication.remotemethod property)": [[4, "nerfbaselines.communication.RemoteMethod.encoded_args", false]], "ensure_loggers_initialized() (nerfbaselines.train.trainer method)": [[8, "nerfbaselines.train.Trainer.ensure_loggers_initialized", false]], "environment (nerfbaselines.backends.condamethod attribute)": [[2, "nerfbaselines.backends.CondaMethod.environment", false]], "environments_path (nerfbaselines.backends.apptainermethod attribute)": [[2, "nerfbaselines.backends.ApptainerMethod.environments_path", false]], "environments_path (nerfbaselines.backends.condamethod attribute)": [[2, "nerfbaselines.backends.CondaMethod.environments_path", false]], "environments_path (nerfbaselines.backends.dockermethod attribute)": [[2, "nerfbaselines.backends.DockerMethod.environments_path", false]], "eval_all() (nerfbaselines.train.trainer method)": [[8, "nerfbaselines.train.Trainer.eval_all", false]], "eval_batch_size (nerfbaselines.methodinfo attribute)": [[1, "nerfbaselines.MethodInfo.eval_batch_size", false]], "eval_single() (nerfbaselines.train.trainer method)": [[8, "nerfbaselines.train.Trainer.eval_single", false]], "every_iters() (nerfbaselines.indices class method)": [[1, "nerfbaselines.Indices.every_iters", false]], "expected_scene_scale (nerfbaselines.datasets.dataset property)": [[5, "nerfbaselines.datasets.Dataset.expected_scene_scale", false]], "expected_scene_scale (nerfbaselines.types.dataset property)": [[9, "nerfbaselines.types.Dataset.expected_scene_scale", false]], "file_paths (nerfbaselines.datasets.dataset attribute)": [[5, "nerfbaselines.datasets.Dataset.file_paths", false]], "file_paths (nerfbaselines.types.dataset attribute)": [[9, "nerfbaselines.types.Dataset.file_paths", false]], "file_paths_root (nerfbaselines.datasets.dataset attribute)": [[5, "nerfbaselines.datasets.Dataset.file_paths_root", false]], "file_paths_root (nerfbaselines.types.dataset attribute)": [[9, "nerfbaselines.types.Dataset.file_paths_root", false]], "format() (nerfbaselines.utils.formatter method)": [[10, "nerfbaselines.utils.Formatter.format", false]], "formatter (class in nerfbaselines.utils)": [[10, "nerfbaselines.utils.Formatter", false]], "full_opencv (nerfbaselines.cameramodel attribute)": [[1, "nerfbaselines.CameraModel.FULL_OPENCV", false]], "get() (in module nerfbaselines.registry)": [[6, "nerfbaselines.registry.get", false]], "get_default_backend() (nerfbaselines.registry.methodspec method)": [[6, "nerfbaselines.registry.MethodSpec.get_default_backend", false]], "get_dockerfile() (nerfbaselines.backends.dockermethod class method)": [[2, "nerfbaselines.backends.DockerMethod.get_dockerfile", false]], "get_environment_hash() (nerfbaselines.backends.condamethod class method)": [[2, "nerfbaselines.backends.CondaMethod.get_environment_hash", false]], "get_info() (nerfbaselines.communication.remotemethod method)": [[4, "nerfbaselines.communication.RemoteMethod.get_info", false]], "get_info() (nerfbaselines.method method)": [[1, "nerfbaselines.Method.get_info", false]], "get_rays() (nerfbaselines.cameras method)": [[1, "nerfbaselines.Cameras.get_rays", false]], "get_train_eval_split_all() (in module nerfbaselines.datasets.nerfstudio)": [[5, "nerfbaselines.datasets.nerfstudio.get_train_eval_split_all", false]], "get_train_eval_split_filename() (in module nerfbaselines.datasets.nerfstudio)": [[5, "nerfbaselines.datasets.nerfstudio.get_train_eval_split_filename", false]], "get_train_eval_split_fraction() (in module nerfbaselines.datasets.nerfstudio)": [[5, "nerfbaselines.datasets.nerfstudio.get_train_eval_split_fraction", false]], "get_train_eval_split_interval() (in module nerfbaselines.datasets.nerfstudio)": [[5, "nerfbaselines.datasets.nerfstudio.get_train_eval_split_interval", false]], "grab_file_id() (in module nerfbaselines.datasets.nerfstudio)": [[5, "nerfbaselines.datasets.nerfstudio.grab_file_id", false]], "home_path (nerfbaselines.backends.apptainermethod attribute)": [[2, "nerfbaselines.backends.ApptainerMethod.home_path", false]], "home_path (nerfbaselines.backends.dockermethod attribute)": [[2, "nerfbaselines.backends.DockerMethod.home_path", false]], "i (nerfbaselines.currentprogress attribute)": [[1, "nerfbaselines.CurrentProgress.i", false]], "image (class in nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.Image", false]], "image (nerfbaselines.backends.apptainermethod attribute)": [[2, "nerfbaselines.backends.ApptainerMethod.image", false]], "image (nerfbaselines.backends.dockermethod attribute)": [[2, "nerfbaselines.backends.DockerMethod.image", false]], "image_i (nerfbaselines.currentprogress attribute)": [[1, "nerfbaselines.CurrentProgress.image_i", false]], "image_sizes (nerfbaselines.cameras attribute)": [[1, "nerfbaselines.Cameras.image_sizes", false]], "image_to_srgb() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.image_to_srgb", false]], "image_total (nerfbaselines.currentprogress attribute)": [[1, "nerfbaselines.CurrentProgress.image_total", false]], "images (nerfbaselines.datasets.dataset attribute)": [[5, "nerfbaselines.datasets.Dataset.images", false]], "images (nerfbaselines.types.dataset attribute)": [[9, "nerfbaselines.types.Dataset.images", false]], "implemented_backends (nerfbaselines.registry.methodspec property)": [[6, "nerfbaselines.registry.MethodSpec.implemented_backends", false]], "indices (class in nerfbaselines)": [[1, "nerfbaselines.Indices", false]], "indicesclicktype (class in nerfbaselines.train)": [[8, "nerfbaselines.train.IndicesClickType", false]], "inject_callables() (in module nerfbaselines.communication)": [[4, "nerfbaselines.communication.inject_callables", false]], "install() (nerfbaselines.backends.apptainer.remoteprocessmethod class method)": [[2, "nerfbaselines.backends.apptainer.RemoteProcessMethod.install", false]], "install() (nerfbaselines.backends.conda.remoteprocessmethod class method)": [[2, "nerfbaselines.backends.conda.RemoteProcessMethod.install", false]], "install() (nerfbaselines.backends.docker.remoteprocessmethod class method)": [[2, "nerfbaselines.backends.docker.RemoteProcessMethod.install", false]], "install() (nerfbaselines.communication.remoteprocessmethod class method)": [[4, "nerfbaselines.communication.RemoteProcessMethod.install", false]], "install() (nerfbaselines.method class method)": [[1, "nerfbaselines.Method.install", false]], "install_script (nerfbaselines.backends.condamethod attribute)": [[2, "nerfbaselines.backends.CondaMethod.install_script", false]], "interpolate_bilinear() (in module nerfbaselines.cameras)": [[3, "nerfbaselines.cameras.interpolate_bilinear", false]], "is_broadcastable() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.is_broadcastable", false]], "item() (nerfbaselines.cameras method)": [[1, "nerfbaselines.Cameras.item", false]], "kwargs (nerfbaselines.registry.methodspec attribute)": [[6, "nerfbaselines.registry.MethodSpec.kwargs", false]], "lazymethod (class in nerfbaselines.registry)": [[6, "nerfbaselines.registry.LazyMethod", false]], "linear_to_srgb() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.linear_to_srgb", false]], "load_blender_dataset() (in module nerfbaselines.datasets.blender)": [[5, "nerfbaselines.datasets.blender.load_blender_dataset", false]], "load_colmap_dataset() (in module nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.load_colmap_dataset", false]], "load_colmap_dataset() (in module nerfbaselines.datasets.mipnerf360)": [[5, "nerfbaselines.datasets.mipnerf360.load_colmap_dataset", false]], "load_dataset() (in module nerfbaselines.datasets)": [[5, "nerfbaselines.datasets.load_dataset", false]], "load_features() (nerfbaselines.datasets.dataset method)": [[5, "nerfbaselines.datasets.Dataset.load_features", false]], "load_features() (nerfbaselines.types.dataset method)": [[9, "nerfbaselines.types.Dataset.load_features", false]], "load_from_json() (in module nerfbaselines.datasets.nerfstudio)": [[5, "nerfbaselines.datasets.nerfstudio.load_from_json", false]], "load_mipnerf360_dataset() (in module nerfbaselines.datasets.mipnerf360)": [[5, "nerfbaselines.datasets.mipnerf360.load_mipnerf360_dataset", false]], "load_nerfstudio_dataset() (in module nerfbaselines.datasets.nerfstudio)": [[5, "nerfbaselines.datasets.nerfstudio.load_nerfstudio_dataset", false]], "loaded_step (nerfbaselines.methodinfo attribute)": [[1, "nerfbaselines.MethodInfo.loaded_step", false]], "log_metrics() (nerfbaselines.train.trainer method)": [[8, "nerfbaselines.train.Trainer.log_metrics", false]], "make_grid() (in module nerfbaselines.train)": [[8, "nerfbaselines.train.make_grid", false]], "mark_host() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.mark_host", false]], "metadata (nerfbaselines.datasets.dataset attribute)": [[5, "nerfbaselines.datasets.Dataset.metadata", false]], "metadata (nerfbaselines.types.dataset attribute)": [[9, "nerfbaselines.types.Dataset.metadata", false]], "method (class in nerfbaselines)": [[1, "nerfbaselines.Method", false]], "method (nerfbaselines.registry.methodspec attribute)": [[6, "nerfbaselines.registry.MethodSpec.method", false]], "methodinfo (class in nerfbaselines)": [[1, "nerfbaselines.MethodInfo", false]], "methodspec (class in nerfbaselines.registry)": [[6, "nerfbaselines.registry.MethodSpec", false]], "module": [[1, "module-nerfbaselines", false], [2, "module-nerfbaselines.backends", false], [2, "module-nerfbaselines.backends.apptainer", false], [2, "module-nerfbaselines.backends.conda", false], [2, "module-nerfbaselines.backends.docker", false], [3, "module-nerfbaselines.cameras", false], [4, "module-nerfbaselines.communication", false], [5, "module-nerfbaselines.datasets", false], [5, "module-nerfbaselines.datasets.blender", false], [5, "module-nerfbaselines.datasets.colmap", false], [5, "module-nerfbaselines.datasets.mipnerf360", false], [5, "module-nerfbaselines.datasets.nerfstudio", false], [6, "module-nerfbaselines.registry", false], [7, "module-nerfbaselines.render", false], [8, "module-nerfbaselines.train", false], [9, "module-nerfbaselines.types", false], [10, "module-nerfbaselines.utils", false]], "mounts (nerfbaselines.backends.apptainermethod attribute)": [[2, "nerfbaselines.backends.ApptainerMethod.mounts", false]], "mounts (nerfbaselines.backends.dockermethod attribute)": [[2, "nerfbaselines.backends.DockerMethod.mounts", false]], "name (nerfbaselines.train.indicesclicktype attribute)": [[8, "nerfbaselines.train.IndicesClickType.name", false]], "nears_fars (nerfbaselines.cameras attribute)": [[1, "nerfbaselines.Cameras.nears_fars", false]], "nerfbaselines": [[1, "module-nerfbaselines", false]], "nerfbaselines-download-dataset command line option": [[11, "cmdoption-nerfbaselines-download-dataset-arg-DATASET", false], [11, "cmdoption-nerfbaselines-download-dataset-o", false], [11, "cmdoption-nerfbaselines-download-dataset-v", false]], "nerfbaselines-render command line option": [[11, "cmdoption-nerfbaselines-render-backend", false], [11, "cmdoption-nerfbaselines-render-checkpoint", false], [11, "cmdoption-nerfbaselines-render-data", false], [11, "cmdoption-nerfbaselines-render-output", false], [11, "cmdoption-nerfbaselines-render-split", false], [11, "cmdoption-nerfbaselines-render-v", false]], "nerfbaselines-shell command line option": [[11, "cmdoption-nerfbaselines-shell-backend", false], [11, "cmdoption-nerfbaselines-shell-method", false], [11, "cmdoption-nerfbaselines-shell-v", false]], "nerfbaselines-train command line option": [[11, "cmdoption-nerfbaselines-train-backend", false], [11, "cmdoption-nerfbaselines-train-checkpoint", false], [11, "cmdoption-nerfbaselines-train-data", false], [11, "cmdoption-nerfbaselines-train-eval-all-iters", false], [11, "cmdoption-nerfbaselines-train-eval-single-iters", false], [11, "cmdoption-nerfbaselines-train-method", false], [11, "cmdoption-nerfbaselines-train-no-wandb", false], [11, "cmdoption-nerfbaselines-train-output", false], [11, "cmdoption-nerfbaselines-train-v", false]], "nerfbaselines.backends": [[2, "module-nerfbaselines.backends", false]], "nerfbaselines.backends.apptainer": [[2, "module-nerfbaselines.backends.apptainer", false]], "nerfbaselines.backends.conda": [[2, "module-nerfbaselines.backends.conda", false]], "nerfbaselines.backends.docker": [[2, "module-nerfbaselines.backends.docker", false]], "nerfbaselines.cameras": [[3, "module-nerfbaselines.cameras", false]], "nerfbaselines.communication": [[4, "module-nerfbaselines.communication", false]], "nerfbaselines.datasets": [[5, "module-nerfbaselines.datasets", false]], "nerfbaselines.datasets.blender": [[5, "module-nerfbaselines.datasets.blender", false]], "nerfbaselines.datasets.colmap": [[5, "module-nerfbaselines.datasets.colmap", false]], "nerfbaselines.datasets.mipnerf360": [[5, "module-nerfbaselines.datasets.mipnerf360", false]], "nerfbaselines.datasets.nerfstudio": [[5, "module-nerfbaselines.datasets.nerfstudio", false]], "nerfbaselines.registry": [[6, "module-nerfbaselines.registry", false]], "nerfbaselines.render": [[7, "module-nerfbaselines.render", false]], "nerfbaselines.train": [[8, "module-nerfbaselines.train", false]], "nerfbaselines.types": [[9, "module-nerfbaselines.types", false]], "nerfbaselines.utils": [[10, "module-nerfbaselines.utils", false]], "normalized_intrinsics (nerfbaselines.cameras attribute)": [[1, "nerfbaselines.Cameras.normalized_intrinsics", false]], "num_iterations (nerfbaselines.methodinfo attribute)": [[1, "nerfbaselines.MethodInfo.num_iterations", false]], "opencv (nerfbaselines.cameramodel attribute)": [[1, "nerfbaselines.CameraModel.OPENCV", false]], "opencv_fisheye (nerfbaselines.cameramodel attribute)": [[1, "nerfbaselines.CameraModel.OPENCV_FISHEYE", false]], "padded_stack() (in module nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.padded_stack", false]], "padded_stack() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.padded_stack", false]], "partialclass() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.partialclass", false]], "partialmethod() (in module nerfbaselines.backends.docker)": [[2, "nerfbaselines.backends.docker.partialmethod", false]], "partialmethod() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.partialmethod", false]], "pinhole (nerfbaselines.cameramodel attribute)": [[1, "nerfbaselines.CameraModel.PINHOLE", false]], "point3d (class in nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.Point3D", false]], "points3d_rgb (nerfbaselines.datasets.dataset attribute)": [[5, "nerfbaselines.datasets.Dataset.points3D_rgb", false]], "points3d_rgb (nerfbaselines.types.dataset attribute)": [[9, "nerfbaselines.types.Dataset.points3D_rgb", false]], "points3d_xyz (nerfbaselines.datasets.dataset attribute)": [[5, "nerfbaselines.datasets.Dataset.points3D_xyz", false]], "points3d_xyz (nerfbaselines.types.dataset attribute)": [[9, "nerfbaselines.types.Dataset.points3D_xyz", false]], "port (nerfbaselines.communication.connectionparams attribute)": [[4, "nerfbaselines.communication.ConnectionParams.port", false]], "poses (nerfbaselines.cameras attribute)": [[1, "nerfbaselines.Cameras.poses", false]], "project() (nerfbaselines.cameras method)": [[1, "nerfbaselines.Cameras.project", false]], "python_path (nerfbaselines.backends.apptainer.remoteprocessmethod attribute)": [[2, "nerfbaselines.backends.apptainer.RemoteProcessMethod.python_path", false]], "python_path (nerfbaselines.backends.conda.remoteprocessmethod attribute)": [[2, "nerfbaselines.backends.conda.RemoteProcessMethod.python_path", false]], "python_path (nerfbaselines.backends.docker.remoteprocessmethod attribute)": [[2, "nerfbaselines.backends.docker.RemoteProcessMethod.python_path", false]], "python_path (nerfbaselines.communication.remoteprocessmethod attribute)": [[4, "nerfbaselines.communication.RemoteProcessMethod.python_path", false]], "python_version (nerfbaselines.backends.condamethod attribute)": [[2, "nerfbaselines.backends.CondaMethod.python_version", false]], "qvec2rotmat() (in module nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.qvec2rotmat", false]], "qvec2rotmat() (nerfbaselines.datasets.colmap.image method)": [[5, "nerfbaselines.datasets.colmap.Image.qvec2rotmat", false]], "raymethod (class in nerfbaselines)": [[1, "nerfbaselines.RayMethod", false]], "read_cameras_binary() (in module nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.read_cameras_binary", false]], "read_cameras_text() (in module nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.read_cameras_text", false]], "read_images_binary() (in module nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.read_images_binary", false]], "read_images_text() (in module nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.read_images_text", false]], "read_points3d_binary() (in module nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.read_points3D_binary", false]], "read_points3d_binary() (in module nerfbaselines.datasets.nerfstudio)": [[5, "nerfbaselines.datasets.nerfstudio.read_points3D_binary", false]], "read_points3d_text() (in module nerfbaselines.datasets.colmap)": [[5, "nerfbaselines.datasets.colmap.read_points3D_text", false]], "read_points3d_text() (in module nerfbaselines.datasets.nerfstudio)": [[5, "nerfbaselines.datasets.nerfstudio.read_points3D_text", false]], "register() (in module nerfbaselines.registry)": [[6, "nerfbaselines.registry.register", false]], "register() (nerfbaselines.registry.methodspec method)": [[6, "nerfbaselines.registry.MethodSpec.register", false]], "remotecallable (class in nerfbaselines.communication)": [[4, "nerfbaselines.communication.RemoteCallable", false]], "remotemethod (class in nerfbaselines.communication)": [[4, "nerfbaselines.communication.RemoteMethod", false]], "remoteprocessmethod (class in nerfbaselines.backends.apptainer)": [[2, "nerfbaselines.backends.apptainer.RemoteProcessMethod", false]], "remoteprocessmethod (class in nerfbaselines.backends.conda)": [[2, "nerfbaselines.backends.conda.RemoteProcessMethod", false]], "remoteprocessmethod (class in nerfbaselines.backends.docker)": [[2, "nerfbaselines.backends.docker.RemoteProcessMethod", false]], "remoteprocessmethod (class in nerfbaselines.communication)": [[4, "nerfbaselines.communication.RemoteProcessMethod", false]], "render() (nerfbaselines.communication.remotemethod method)": [[4, "nerfbaselines.communication.RemoteMethod.render", false]], "render() (nerfbaselines.method method)": [[1, "nerfbaselines.Method.render", false]], "render() (nerfbaselines.raymethod method)": [[1, "nerfbaselines.RayMethod.render", false]], "render_all_images() (in module nerfbaselines.render)": [[7, "nerfbaselines.render.render_all_images", false]], "render_rays() (nerfbaselines.raymethod method)": [[1, "nerfbaselines.RayMethod.render_rays", false]], "replace_callables() (in module nerfbaselines.communication)": [[4, "nerfbaselines.communication.replace_callables", false]], "required_features (nerfbaselines.methodinfo attribute)": [[1, "nerfbaselines.MethodInfo.required_features", false]], "sampling_mask_paths (nerfbaselines.datasets.dataset attribute)": [[5, "nerfbaselines.datasets.Dataset.sampling_mask_paths", false]], "sampling_mask_paths (nerfbaselines.types.dataset attribute)": [[9, "nerfbaselines.types.Dataset.sampling_mask_paths", false]], "sampling_masks (nerfbaselines.datasets.dataset attribute)": [[5, "nerfbaselines.datasets.Dataset.sampling_masks", false]], "sampling_masks (nerfbaselines.types.dataset attribute)": [[9, "nerfbaselines.types.Dataset.sampling_masks", false]], "save() (nerfbaselines.communication.remotemethod method)": [[4, "nerfbaselines.communication.RemoteMethod.save", false]], "save() (nerfbaselines.method method)": [[1, "nerfbaselines.Method.save", false]], "save() (nerfbaselines.train.trainer method)": [[8, "nerfbaselines.train.Trainer.save", false]], "save_depth() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.save_depth", false]], "save_image() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.save_image", false]], "setup_data() (nerfbaselines.train.trainer method)": [[8, "nerfbaselines.train.Trainer.setup_data", false]], "setup_logging() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.setup_logging", false]], "setup_train() (nerfbaselines.communication.remotemethod method)": [[4, "nerfbaselines.communication.RemoteMethod.setup_train", false]], "setup_train() (nerfbaselines.method method)": [[1, "nerfbaselines.Method.setup_train", false]], "setup_train() (nerfbaselines.raymethod method)": [[1, "nerfbaselines.RayMethod.setup_train", false]], "shared_path (nerfbaselines.backends.apptainermethod property)": [[2, "nerfbaselines.backends.ApptainerMethod.shared_path", false]], "shared_path (nerfbaselines.backends.dockermethod property)": [[2, "nerfbaselines.backends.DockerMethod.shared_path", false]], "shared_path (nerfbaselines.communication.remotemethod property)": [[4, "nerfbaselines.communication.RemoteMethod.shared_path", false]], "single() (in module nerfbaselines.datasets.mipnerf360)": [[5, "nerfbaselines.datasets.mipnerf360.single", false]], "srgb_to_linear() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.srgb_to_linear", false]], "start_backend() (in module nerfbaselines.communication)": [[4, "nerfbaselines.communication.start_backend", false]], "supported_camera_models (nerfbaselines.methodinfo attribute)": [[1, "nerfbaselines.MethodInfo.supported_camera_models", false]], "supported_methods() (in module nerfbaselines.registry)": [[6, "nerfbaselines.registry.supported_methods", false]], "to_apptainer() (nerfbaselines.backends.dockermethod class method)": [[2, "nerfbaselines.backends.DockerMethod.to_apptainer", false]], "total (nerfbaselines.currentprogress attribute)": [[1, "nerfbaselines.CurrentProgress.total", false]], "train() (nerfbaselines.train.trainer method)": [[8, "nerfbaselines.train.Trainer.train", false]], "train_iteration() (nerfbaselines.communication.remotemethod method)": [[4, "nerfbaselines.communication.RemoteMethod.train_iteration", false]], "train_iteration() (nerfbaselines.method method)": [[1, "nerfbaselines.Method.train_iteration", false]], "train_iteration() (nerfbaselines.raymethod method)": [[1, "nerfbaselines.RayMethod.train_iteration", false]], "train_iteration() (nerfbaselines.train.trainer method)": [[8, "nerfbaselines.train.Trainer.train_iteration", false]], "train_iteration_rays() (nerfbaselines.raymethod method)": [[1, "nerfbaselines.RayMethod.train_iteration_rays", false]], "trainer (class in nerfbaselines.train)": [[8, "nerfbaselines.train.Trainer", false]], "undistort_camera() (in module nerfbaselines.cameras)": [[3, "nerfbaselines.cameras.undistort_camera", false]], "unproject() (nerfbaselines.cameras method)": [[1, "nerfbaselines.Cameras.unproject", false]], "visualize_depth() (in module nerfbaselines.utils)": [[10, "nerfbaselines.utils.visualize_depth", false]], "warp_image_between_cameras() (in module nerfbaselines.cameras)": [[3, "nerfbaselines.cameras.warp_image_between_cameras", false]], "with_image_sizes() (nerfbaselines.cameras method)": [[1, "nerfbaselines.Cameras.with_image_sizes", false]], "with_supported_camera_models() (in module nerfbaselines.render)": [[7, "nerfbaselines.render.with_supported_camera_models", false]], "wrap() (nerfbaselines.backends.apptainer.remoteprocessmethod class method)": [[2, "nerfbaselines.backends.apptainer.RemoteProcessMethod.wrap", false]], "wrap() (nerfbaselines.backends.conda.remoteprocessmethod class method)": [[2, "nerfbaselines.backends.conda.RemoteProcessMethod.wrap", false]], "wrap() (nerfbaselines.backends.docker.remoteprocessmethod class method)": [[2, "nerfbaselines.backends.docker.RemoteProcessMethod.wrap", false]], "wrap() (nerfbaselines.communication.remoteprocessmethod class method)": [[4, "nerfbaselines.communication.RemoteProcessMethod.wrap", false]]}, "objects": {"": [[1, 0, 0, "-", "nerfbaselines"]], "nerfbaselines": [[1, 1, 1, "", "CameraModel"], [1, 1, 1, "", "Cameras"], [1, 1, 1, "", "CurrentProgress"], [1, 1, 1, "", "Indices"], [1, 1, 1, "", "Method"], [1, 1, 1, "", "MethodInfo"], [1, 1, 1, "", "RayMethod"], [2, 0, 0, "-", "backends"], [3, 0, 0, "-", "cameras"], [4, 0, 0, "-", "communication"], [5, 0, 0, "-", "datasets"], [6, 0, 0, "-", "registry"], [7, 0, 0, "-", "render"], [8, 0, 0, "-", "train"], [9, 0, 0, "-", "types"], [10, 0, 0, "-", "utils"]], "nerfbaselines-download-dataset": [[11, 7, 1, "cmdoption-nerfbaselines-download-dataset-o", "--output"], [11, 7, 1, "cmdoption-nerfbaselines-download-dataset-v", "--verbose"], [11, 7, 1, "cmdoption-nerfbaselines-download-dataset-o", "-o"], [11, 7, 1, "cmdoption-nerfbaselines-download-dataset-v", "-v"], [11, 7, 1, "cmdoption-nerfbaselines-download-dataset-arg-DATASET", "DATASET"]], "nerfbaselines-render": [[11, 7, 1, "cmdoption-nerfbaselines-render-backend", "--backend"], [11, 7, 1, "cmdoption-nerfbaselines-render-checkpoint", "--checkpoint"], [11, 7, 1, "cmdoption-nerfbaselines-render-data", "--data"], [11, 7, 1, "cmdoption-nerfbaselines-render-output", "--output"], [11, 7, 1, "cmdoption-nerfbaselines-render-split", "--split"], [11, 7, 1, "cmdoption-nerfbaselines-render-v", "--verbose"], [11, 7, 1, "cmdoption-nerfbaselines-render-v", "-v"]], "nerfbaselines-shell": [[11, 7, 1, "cmdoption-nerfbaselines-shell-backend", "--backend"], [11, 7, 1, "cmdoption-nerfbaselines-shell-method", "--method"], [11, 7, 1, "cmdoption-nerfbaselines-shell-v", "--verbose"], [11, 7, 1, "cmdoption-nerfbaselines-shell-v", "-v"]], "nerfbaselines-train": [[11, 7, 1, "cmdoption-nerfbaselines-train-backend", "--backend"], [11, 7, 1, "cmdoption-nerfbaselines-train-checkpoint", "--checkpoint"], [11, 7, 1, "cmdoption-nerfbaselines-train-data", "--data"], [11, 7, 1, "cmdoption-nerfbaselines-train-eval-all-iters", "--eval-all-iters"], [11, 7, 1, "cmdoption-nerfbaselines-train-eval-single-iters", "--eval-single-iters"], [11, 7, 1, "cmdoption-nerfbaselines-train-method", "--method"], [11, 7, 1, "cmdoption-nerfbaselines-train-no-wandb", "--no-wandb"], [11, 7, 1, "cmdoption-nerfbaselines-train-output", "--output"], [11, 7, 1, "cmdoption-nerfbaselines-train-v", "--verbose"], [11, 7, 1, "cmdoption-nerfbaselines-train-v", "-v"]], "nerfbaselines.CameraModel": [[1, 2, 1, "", "FULL_OPENCV"], [1, 2, 1, "", "OPENCV"], [1, 2, 1, "", "OPENCV_FISHEYE"], [1, 2, 1, "", "PINHOLE"]], "nerfbaselines.Cameras": [[1, 2, 1, "", "camera_types"], [1, 3, 1, "", "cat"], [1, 2, 1, "", "distortion_parameters"], [1, 3, 1, "", "get_rays"], [1, 2, 1, "", "image_sizes"], [1, 3, 1, "", "item"], [1, 2, 1, "", "nears_fars"], [1, 2, 1, "", "normalized_intrinsics"], [1, 2, 1, "", "poses"], [1, 3, 1, "", "project"], [1, 3, 1, "", "unproject"], [1, 3, 1, "", "with_image_sizes"]], "nerfbaselines.CurrentProgress": [[1, 2, 1, "", "i"], [1, 2, 1, "", "image_i"], [1, 2, 1, "", "image_total"], [1, 2, 1, "", "total"]], "nerfbaselines.Indices": [[1, 3, 1, "", "every_iters"]], "nerfbaselines.Method": [[1, 3, 1, "", "get_info"], [1, 3, 1, "", "install"], [1, 3, 1, "", "render"], [1, 3, 1, "", "save"], [1, 3, 1, "", "setup_train"], [1, 3, 1, "", "train_iteration"]], "nerfbaselines.MethodInfo": [[1, 2, 1, "", "batch_size"], [1, 2, 1, "", "eval_batch_size"], [1, 2, 1, "", "loaded_step"], [1, 2, 1, "", "num_iterations"], [1, 2, 1, "", "required_features"], [1, 2, 1, "", "supported_camera_models"]], "nerfbaselines.RayMethod": [[1, 3, 1, "", "render"], [1, 3, 1, "", "render_rays"], [1, 3, 1, "", "setup_train"], [1, 3, 1, "", "train_iteration"], [1, 3, 1, "", "train_iteration_rays"]], "nerfbaselines.backends": [[2, 1, 1, "", "ApptainerMethod"], [2, 1, 1, "", "CondaMethod"], [2, 1, 1, "", "DockerMethod"], [2, 0, 0, "-", "apptainer"], [2, 0, 0, "-", "conda"], [2, 0, 0, "-", "docker"]], "nerfbaselines.backends.ApptainerMethod": [[2, 2, 1, "", "environments_path"], [2, 2, 1, "", "home_path"], [2, 2, 1, "", "image"], [2, 2, 1, "", "mounts"], [2, 4, 1, "", "shared_path"]], "nerfbaselines.backends.CondaMethod": [[2, 2, 1, "", "conda_name"], [2, 2, 1, "", "environment"], [2, 2, 1, "", "environments_path"], [2, 3, 1, "", "get_environment_hash"], [2, 2, 1, "", "install_script"], [2, 2, 1, "", "python_version"]], "nerfbaselines.backends.DockerMethod": [[2, 2, 1, "", "environments_path"], [2, 3, 1, "", "get_dockerfile"], [2, 2, 1, "", "home_path"], [2, 2, 1, "", "image"], [2, 2, 1, "", "mounts"], [2, 4, 1, "", "shared_path"], [2, 3, 1, "", "to_apptainer"]], "nerfbaselines.backends.apptainer": [[2, 1, 1, "", "RemoteProcessMethod"]], "nerfbaselines.backends.apptainer.RemoteProcessMethod": [[2, 2, 1, "", "build_code"], [2, 3, 1, "", "close"], [2, 3, 1, "", "install"], [2, 2, 1, "", "python_path"], [2, 3, 1, "", "wrap"]], "nerfbaselines.backends.conda": [[2, 1, 1, "", "RemoteProcessMethod"]], "nerfbaselines.backends.conda.RemoteProcessMethod": [[2, 2, 1, "", "build_code"], [2, 3, 1, "", "close"], [2, 3, 1, "", "install"], [2, 2, 1, "", "python_path"], [2, 3, 1, "", "wrap"]], "nerfbaselines.backends.docker": [[2, 1, 1, "", "RemoteProcessMethod"], [2, 5, 1, "", "partialmethod"]], "nerfbaselines.backends.docker.RemoteProcessMethod": [[2, 2, 1, "", "build_code"], [2, 3, 1, "", "close"], [2, 3, 1, "", "install"], [2, 2, 1, "", "python_path"], [2, 3, 1, "", "wrap"]], "nerfbaselines.cameras": [[3, 5, 1, "", "interpolate_bilinear"], [3, 5, 1, "", "undistort_camera"], [3, 5, 1, "", "warp_image_between_cameras"]], "nerfbaselines.communication": [[4, 1, 1, "", "ConnectionParams"], [4, 1, 1, "", "RemoteCallable"], [4, 1, 1, "", "RemoteMethod"], [4, 1, 1, "", "RemoteProcessMethod"], [4, 5, 1, "", "inject_callables"], [4, 5, 1, "", "replace_callables"], [4, 5, 1, "", "start_backend"]], "nerfbaselines.communication.ConnectionParams": [[4, 2, 1, "", "authkey"], [4, 2, 1, "", "port"]], "nerfbaselines.communication.RemoteMethod": [[4, 3, 1, "", "close"], [4, 3, 1, "", "decode_args"], [4, 4, 1, "", "encoded_args"], [4, 3, 1, "", "get_info"], [4, 3, 1, "", "render"], [4, 3, 1, "", "save"], [4, 3, 1, "", "setup_train"], [4, 4, 1, "", "shared_path"], [4, 3, 1, "", "train_iteration"]], "nerfbaselines.communication.RemoteProcessMethod": [[4, 2, 1, "", "build_code"], [4, 3, 1, "", "close"], [4, 3, 1, "", "install"], [4, 2, 1, "", "python_path"], [4, 3, 1, "", "wrap"]], "nerfbaselines.datasets": [[5, 1, 1, "", "Dataset"], [5, 6, 1, "", "DatasetNotFoundError"], [5, 0, 0, "-", "blender"], [5, 0, 0, "-", "colmap"], [5, 5, 1, "", "download_dataset"], [5, 5, 1, "", "load_dataset"], [5, 0, 0, "-", "mipnerf360"], [5, 0, 0, "-", "nerfstudio"]], "nerfbaselines.datasets.Dataset": [[5, 2, 1, "", "cameras"], [5, 2, 1, "", "color_space"], [5, 4, 1, "", "expected_scene_scale"], [5, 2, 1, "", "file_paths"], [5, 2, 1, "", "file_paths_root"], [5, 2, 1, "", "images"], [5, 3, 1, "", "load_features"], [5, 2, 1, "", "metadata"], [5, 2, 1, "", "points3D_rgb"], [5, 2, 1, "", "points3D_xyz"], [5, 2, 1, "", "sampling_mask_paths"], [5, 2, 1, "", "sampling_masks"]], "nerfbaselines.datasets.blender": [[5, 5, 1, "", "download_blender_dataset"], [5, 5, 1, "", "load_blender_dataset"]], "nerfbaselines.datasets.colmap": [[5, 1, 1, "", "Camera"], [5, 1, 1, "", "Image"], [5, 1, 1, "", "Point3D"], [5, 5, 1, "", "load_colmap_dataset"], [5, 5, 1, "", "padded_stack"], [5, 5, 1, "", "qvec2rotmat"], [5, 5, 1, "", "read_cameras_binary"], [5, 5, 1, "", "read_cameras_text"], [5, 5, 1, "", "read_images_binary"], [5, 5, 1, "", "read_images_text"], [5, 5, 1, "", "read_points3D_binary"], [5, 5, 1, "", "read_points3D_text"]], "nerfbaselines.datasets.colmap.Image": [[5, 3, 1, "", "qvec2rotmat"]], "nerfbaselines.datasets.mipnerf360": [[5, 5, 1, "", "download_mipnerf360_dataset"], [5, 5, 1, "", "load_colmap_dataset"], [5, 5, 1, "", "load_mipnerf360_dataset"], [5, 5, 1, "", "single"]], "nerfbaselines.datasets.nerfstudio": [[5, 5, 1, "", "download_capture_name"], [5, 5, 1, "", "download_nerfstudio_dataset"], [5, 5, 1, "", "get_train_eval_split_all"], [5, 5, 1, "", "get_train_eval_split_filename"], [5, 5, 1, "", "get_train_eval_split_fraction"], [5, 5, 1, "", "get_train_eval_split_interval"], [5, 5, 1, "", "grab_file_id"], [5, 5, 1, "", "load_from_json"], [5, 5, 1, "", "load_nerfstudio_dataset"], [5, 5, 1, "", "read_points3D_binary"], [5, 5, 1, "", "read_points3D_text"]], "nerfbaselines.registry": [[6, 1, 1, "", "LazyMethod"], [6, 1, 1, "", "MethodSpec"], [6, 5, 1, "", "auto_register"], [6, 5, 1, "", "get"], [6, 5, 1, "", "register"], [6, 5, 1, "", "supported_methods"]], "nerfbaselines.registry.MethodSpec": [[6, 2, 1, "", "apptainer"], [6, 2, 1, "", "args"], [6, 3, 1, "", "build"], [6, 2, 1, "", "conda"], [6, 2, 1, "", "docker"], [6, 3, 1, "", "get_default_backend"], [6, 4, 1, "", "implemented_backends"], [6, 2, 1, "", "kwargs"], [6, 2, 1, "", "method"], [6, 3, 1, "", "register"]], "nerfbaselines.render": [[7, 5, 1, "", "render_all_images"], [7, 5, 1, "", "with_supported_camera_models"]], "nerfbaselines.train": [[8, 1, 1, "", "IndicesClickType"], [8, 1, 1, "", "Trainer"], [8, 5, 1, "", "compute_exponential_gamma"], [8, 5, 1, "", "compute_image_metrics"], [8, 5, 1, "", "make_grid"]], "nerfbaselines.train.IndicesClickType": [[8, 3, 1, "", "convert"], [8, 2, 1, "", "name"]], "nerfbaselines.train.Trainer": [[8, 3, 1, "", "close"], [8, 3, 1, "", "ensure_loggers_initialized"], [8, 3, 1, "", "eval_all"], [8, 3, 1, "", "eval_single"], [8, 3, 1, "", "log_metrics"], [8, 3, 1, "", "save"], [8, 3, 1, "", "setup_data"], [8, 3, 1, "", "train"], [8, 3, 1, "", "train_iteration"]], "nerfbaselines.types": [[9, 1, 1, "", "Dataset"], [9, 5, 1, "", "batched"]], "nerfbaselines.types.Dataset": [[9, 2, 1, "", "cameras"], [9, 2, 1, "", "color_space"], [9, 4, 1, "", "expected_scene_scale"], [9, 2, 1, "", "file_paths"], [9, 2, 1, "", "file_paths_root"], [9, 2, 1, "", "images"], [9, 3, 1, "", "load_features"], [9, 2, 1, "", "metadata"], [9, 2, 1, "", "points3D_rgb"], [9, 2, 1, "", "points3D_xyz"], [9, 2, 1, "", "sampling_mask_paths"], [9, 2, 1, "", "sampling_masks"]], "nerfbaselines.utils": [[10, 1, 1, "", "Formatter"], [10, 5, 1, "", "batched"], [10, 5, 1, "", "convert_image_dtype"], [10, 5, 1, "", "image_to_srgb"], [10, 5, 1, "", "is_broadcastable"], [10, 5, 1, "", "linear_to_srgb"], [10, 5, 1, "", "mark_host"], [10, 5, 1, "", "padded_stack"], [10, 5, 1, "", "partialclass"], [10, 5, 1, "", "partialmethod"], [10, 5, 1, "", "save_depth"], [10, 5, 1, "", "save_image"], [10, 5, 1, "", "setup_logging"], [10, 5, 1, "", "srgb_to_linear"], [10, 5, 1, "", "visualize_depth"]], "nerfbaselines.utils.Formatter": [[10, 3, 1, "", "format"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"], "7": ["std", "cmdoption", "program option"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:exception", "7": "std:cmdoption"}, "terms": {"": 10, "0": [1, 4, 8], "1": [1, 8], "12": [1, 3, 10], "1920": 8, "19tv6kdvgcmg3cgz1bniunbbmd": 5, "2": [1, 8], "2023": 5, "3": [1, 3, 10], "42": 1, "6": [1, 3, 10], "If": [5, 8, 10], "It": 8, "Near": 1, "The": [5, 8, 10], "__init__": [1, 3, 10], "abstract": 1, "accept": 8, "address": 4, "all": [5, 7, 11], "allow_alpha": 10, "alreadi": 8, "also": 8, "ani": 6, "api": 12, "append": 10, "apptain": [6, 11], "apptainermethod": [2, 6], "ar": [5, 8, 10], "arg": [1, 2, 4, 6, 10, 11], "argument": [8, 11], "arrai": [9, 10], "arriv": 8, "attribut": 10, "authkei": 4, "auto_regist": 6, "backend": [0, 6, 11], "background": 8, "background_color": 10, "base": [1, 2, 4, 5, 6, 8, 9, 10], "baseimag": 5, "batch": [9, 10], "batch_siz": [1, 9, 10], "befor": 10, "big": 11, "bool": [1, 8, 10], "both": 5, "boundari": 1, "build": 6, "build_cod": [2, 4], "byte": 4, "cach": 2, "call": [8, 10], "callabl": [1, 4, 8], "callback": [1, 4], "camera": [0, 1, 4, 5, 9, 12], "camera_id": 5, "camera_typ": 1, "cameramodel": [1, 12], "cameras1": 3, "cameras2": 3, "can": 5, "cannot": 8, "captur": 5, "carri": 10, "cat": 1, "cc": 5, "certain": 8, "checkpoint": [4, 11], "cl": 10, "class": [1, 2, 4, 5, 6, 8, 9, 10], "classmethod": [1, 2, 4], "cli": 12, "close": [2, 4, 8], "color": [1, 5], "color_spac": [5, 7, 8, 9, 10], "com": 5, "command": [8, 11], "commun": 0, "compat": 8, "comput": 10, "compute_exponential_gamma": 8, "compute_image_metr": 8, "conda": [6, 11], "conda_nam": 2, "condamethod": [2, 6], "conn": 4, "connection_param": 4, "connectionparam": 4, "const": 5, "context": 8, "convert": 8, "convert_image_dtyp": 10, "correct": 8, "coupl": 10, "ctx": 8, "current": [1, 4, 8], "currentprogress": [1, 12], "data": [1, 4, 5, 11], "dataset": [0, 1, 4, 7, 8, 9, 12], "datasetnotfounderror": 5, "datefmt": 10, "decode_arg": 4, "default": [1, 4, 10], "depth": [4, 10], "descript": [7, 8], "determin": 10, "dict": [1, 5, 6, 9], "dictionari": [5, 10], "direct": 1, "directli": 5, "directori": 11, "distortion_paramet": 1, "docker": [6, 11], "dockermethod": [2, 6], "download": [5, 12], "download_blender_dataset": 5, "download_capture_nam": 5, "download_dataset": 5, "download_mipnerf360_dataset": 5, "download_nerfstudio_dataset": 5, "downscale_factor": 5, "drive": 5, "drive_link": 5, "dtype": 10, "encoded_arg": 4, "ensure_loggers_initi": 8, "enum": 1, "env": 2, "environ": 2, "environments_path": 2, "error": 5, "etc": [1, 4], "eval": [5, 11], "eval_al": 8, "eval_all_it": [8, 11], "eval_batch_s": 1, "eval_interv": 5, "eval_singl": 8, "eval_single_it": [8, 11], "evalu": 11, "event": 10, "every_it": 1, "except": [5, 10], "expected_scal": 10, "expected_scene_scal": [5, 7, 9], "factori": [1, 4, 5, 6, 9], "fail": 8, "fals": [1, 6, 10], "far": 1, "featur": 5, "file": [5, 10, 11], "file_id_or_zip_url": 5, "file_path": [5, 9], "file_paths_root": [5, 9], "fileio": 10, "filenam": 5, "final_lr": 8, "float": [5, 7, 8, 10], "fmt": 10, "fn": 10, "folder": 5, "forc": 6, "format": [5, 10], "formatexcept": 10, "formatt": 10, "formattim": 10, "fraction": 5, "from": [1, 3, 5, 8, 10], "frozenset": [1, 5, 6], "full_opencv": 1, "func": [2, 10], "gaussian": 11, "get": [1, 4, 5, 6], "get_default_backend": 6, "get_dockerfil": 2, "get_environment_hash": 2, "get_info": [1, 4], "get_rai": 1, "get_train_eval_split_al": 5, "get_train_eval_split_filenam": 5, "get_train_eval_split_fract": 5, "get_train_eval_split_interv": 5, "getmessag": 10, "given": [1, 5], "googl": 5, "gpu": 11, "grab_file_id": 5, "gt": 8, "gz": 11, "height": 5, "home": 2, "home_path": 2, "hostedtoolcach": [1, 3, 10], "http": 5, "huge": 11, "i": [1, 4, 8, 10], "id": 5, "imag": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11], "image_filenam": 5, "image_i": 1, "image_id": 5, "image_s": 1, "image_to_srgb": 10, "image_tot": 1, "images_path": 5, "img": 10, "implemented_backend": 6, "indic": [1, 5, 8, 12], "indicesclicktyp": 8, "info": [1, 4], "inform": 10, "initial_lr": 8, "inject_cal": 4, "input": 8, "instal": [1, 2, 4], "install_script": 2, "instant": 11, "int": [1, 4, 5, 8], "interest": 5, "interpolate_bilinear": 3, "interv": 5, "iqjrbg": 5, "is_broadcast": 10, "item": 1, "iter": [1, 4, 11], "its": 8, "json": 5, "kwarg": [1, 2, 4, 5, 6, 10], "latest": 11, "lazymethod": 6, "lib": [1, 3, 10], "line": 8, "linear": [5, 8, 9], "linear_to_srgb": 10, "list": [2, 5, 9, 10], "liter": [1, 5, 6, 8, 9], "load": 5, "load_blender_dataset": 5, "load_colmap_dataset": 5, "load_dataset": 5, "load_featur": [5, 9], "load_from_json": 5, "load_mipnerf360_dataset": 5, "load_nerfstudio_dataset": 5, "loaded_step": 1, "localhost": 4, "log_metr": 8, "logrecord": 10, "mai": 8, "make_grid": 8, "mark_host": 10, "max_width": 8, "messag": [8, 10], "metadata": [5, 9], "method": [1, 2, 4, 6, 7, 8, 11, 12], "methodinfo": [1, 4, 12], "methodspec": 6, "metric": 8, "mipnerf360": 11, "miss": 8, "model": [1, 4, 5], "modul": [1, 3, 10], "mount": 2, "must": 8, "my_id": 4, "name": [1, 5, 6, 8], "nb": 2, "ncol": 8, "ndarrai": [1, 3, 5, 8, 9, 10], "near_far": 10, "nears_far": 1, "nerf": 11, "nerfacto": 11, "nerfbaselin": 0, "ngp": 11, "none": [1, 2, 4, 5, 6, 7, 8, 9, 10], "normalized_intrins": 1, "num_it": 8, "num_iter": [1, 4, 8], "number": [1, 4, 5], "numpi": [1, 3, 5, 9, 10], "o": 11, "obj": 4, "object": [1, 4, 5, 6, 8, 9], "obtain": 5, "one": [1, 4], "opencv": 1, "opencv_fishey": 1, "oper": 10, "operand": 10, "opt": [1, 3, 10], "optim": [1, 4], "option": [1, 5, 6, 9, 11], "origin": 1, "other": 8, "out": 10, "output": [5, 7, 8, 11], "packag": [1, 3, 10], "pad": 8, "padded_stack": [5, 10], "pallet": 10, "paper": 5, "param": [4, 5, 8], "paramet": [1, 4, 5, 8], "paramtyp": 8, "partialclass": 10, "partialmethod": [2, 10], "path": [1, 4, 5, 7, 8, 9, 10], "path_to_model_fil": 5, "pathlib": [5, 8, 9], "pinhol": 1, "plane": 1, "point2d_idx": 5, "point3d": 5, "point3d_id": 5, "points3d_rgb": [5, 9], "points3d_xyz": [1, 5, 9], "port": 4, "pose": 1, "posixpath": 8, "pred": 8, "prefix": [2, 8], "preparatori": 10, "progress": [1, 4], "progress_callback": [1, 4], "project": 1, "prompt": 8, "properti": [2, 4, 5, 6, 9], "protocol": 1, "py": [1, 3, 10], "python": [1, 2, 3, 4, 6, 10, 11], "python3": [1, 3, 10], "python_path": [2, 4], "python_vers": 2, "qualnam": 1, "qvec": 5, "qvec2rotmat": 5, "rai": 1, "raymethod": [1, 12], "read_cameras_binari": 5, "read_cameras_text": 5, "read_images_binari": 5, "read_images_text": 5, "read_points3d_binari": 5, "read_points3d_text": 5, "readcamerasbinari": 5, "readcamerastext": 5, "readimagesbinari": 5, "readimagestext": 5, "readpoints3dbinari": 5, "readpoints3dtext": 5, "reconstruct": 5, "record": 10, "regist": 6, "registri": 0, "remote_kwarg": [2, 4], "remotecal": 4, "remotemethod": [2, 4], "remoteprocessmethod": [2, 4], "render": [0, 1, 4, 12], "render_all_imag": 7, "render_rai": 1, "replace_cal": 4, "requir": 11, "required_featur": [1, 5, 9], "return": [1, 4, 10], "rgb": 5, "root": 2, "runner": 2, "sampling_mask": [5, 9], "sampling_mask_path": [5, 9], "save": [1, 4, 8], "save_depth": 10, "save_imag": 10, "save_it": 8, "see": 5, "seed": 1, "sequenc": 1, "setup": [1, 4], "setup_data": 8, "setup_log": 10, "setup_train": [1, 4], "shape1": 10, "shape2": 10, "shared_path": [2, 4], "shell": 12, "siggraph": 5, "singl": [5, 11], "site": [1, 3, 10], "situat": 8, "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "spec": 6, "specif": 5, "specifi": 10, "splat": 11, "split": [5, 11], "src": 5, "srgb": [5, 8, 9, 10], "srgb_to_linear": 10, "start": 1, "start_backend": 4, "static": 4, "std": 5, "step": [1, 4, 10], "str": [1, 2, 4, 5, 6, 7, 8, 9, 10], "string": [5, 8, 10], "style": 10, "subset": 5, "supported_camera_model": [1, 5, 7, 9], "supported_method": 6, "tar": 11, "tensor": [5, 10], "test_dataset": 8, "test_indic": 5, "tetra": 11, "text": 10, "thi": 8, "time": 10, "to_apptain": 2, "total": 1, "train": [0, 1, 4, 5, 12], "train_dataset": [1, 4, 8], "train_iter": [1, 4, 8], "train_iteration_rai": 1, "train_split_fract": 5, "trainer": [1, 4, 8], "true": [8, 10], "tupl": [1, 2, 4, 5, 6], "tvec": 5, "type": [0, 1, 2, 4, 6, 8], "undistort_camera": 3, "unproject": 1, "url": 5, "us": [5, 8, 10, 11], "use_wandb": 8, "usestim": 10, "usp": 5, "util": [0, 8], "v": 11, "valid": 10, "valu": [1, 8], "var": 2, "verbos": [10, 11], "viridi": 10, "visit": 5, "visualize_depth": 10, "void": 5, "wandb": 11, "warp_image_between_camera": 3, "well": 8, "when": [8, 11], "where": 5, "which": 10, "width": 5, "with_image_s": 1, "with_supported_camera_model": 7, "wrap": [2, 4], "writecamerasbinari": 5, "writecamerastext": 5, "writeimagesbinari": 5, "writeimagestext": 5, "writepoints3dbinari": 5, "writepoints3dtext": 5, "x": 5, "x64": [1, 3, 10], "xnp": [1, 3, 10], "xy": [1, 3, 5], "xyz": [1, 5], "yield": 10, "you": 5, "zero": 1, "zip": 5, "zip_url": 5}, "titles": ["API Reference", "nerfbaselines", "nerfbaselines.backends", "nerfbaselines.cameras", "nerfbaselines.communication", "nerfbaselines.datasets", "nerfbaselines.registry", "nerfbaselines.render", "nerfbaselines.train", "nerfbaselines.types", "nerfbaselines.utils", "nerfbaselines", "NerfBaselines Documentation"], "titleterms": {"api": 0, "apptain": 2, "backend": 2, "blender": 5, "camera": 3, "colmap": 5, "commun": 4, "conda": 2, "dataset": [5, 11], "docker": 2, "document": 12, "download": 11, "mipnerf360": 5, "nerfbaselin": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "nerfstudio": 5, "refer": [0, 12], "registri": 6, "render": [7, 11], "shell": 11, "train": [8, 11], "type": 9, "util": 10}})